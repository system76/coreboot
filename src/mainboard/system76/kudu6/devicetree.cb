# SPDX-License-Identifier: GPL-2.0-only

chip soc/amd/cezanne

	register "common_config.acp_config" = "{
		.acp_pin_cfg = I2S_PINS_I2S_TDM,
		.acp_i2s_wake_enable = 0,
		.acp_pme_enable = 0,
		.dmic_present = 1,
	}"

	register "common_config.espi_config" = "{
		.std_io_decode_bitmap = ESPI_DECODE_IO_0x80_EN | ESPI_DECODE_IO_0X60_0X64_EN,
		/* EC PM channel */
		.generic_io_range[0] = {
			.base = 0x62,
			/*
			 * Only 0x62 and 0x66 are required. But, this is not supported by
			 * standard IO decodes and there are only 4 generic I/O windows
			 * available. Hence, open a window from 0x62-0x67.
			 */
			.size = 5,
		},
		/* AP/EC debug */
		.generic_io_range[1] = {
			.base = 0xE00,
			.size = 256,
		},
		/* AP/EC debug */
		.generic_io_range[2] = {
			.base = 0xF00,
			.size = 256,
		},

		.io_mode = ESPI_IO_MODE_QUAD,
		.op_freq_mhz = ESPI_OP_FREQ_33_MHZ,
		.crc_check_enable = 1,
		.alert_pin = ESPI_ALERT_PIN_OPEN_DRAIN,
		.periph_ch_en = 1,
		.vw_ch_en = 1,
		.oob_ch_en = 0,
		.flash_ch_en = 0,

		.vw_irq_polarity = ESPI_VW_IRQ_LEVEL_HIGH(1),
	}"

	register "i2c_scl_reset" = "GPIO_I2C0_SCL | GPIO_I2C1_SCL |
					GPIO_I2C2_SCL | GPIO_I2C3_SCL"
	# I2C Pad Control RX Select Configuration
	register "i2c_pad[0].rx_level" = "I2C_PAD_RX_3_3V" # Trackpad
	register "i2c_pad[1].rx_level" = "I2C_PAD_RX_3_3V" # NC
	register "i2c_pad[2].rx_level" = "I2C_PAD_RX_3_3V" # DDR4
	register "i2c_pad[3].rx_level" = "I2C_PAD_RX_3_3V" # USB-PD


	register "s0ix_enable" = "true"

	register "pspp_policy" = "DXIO_PSPP_BALANCED"

	register "gpp_clk_config[0]" = "GPP_CLK_REQ"
	register "gpp_clk_config[1]" = "GPP_CLK_REQ"
	register "gpp_clk_config[2]" = "GPP_CLK_OFF"
	register "gpp_clk_config[3]" = "GPP_CLK_OFF"
	register "gpp_clk_config[4]" = "GPP_CLK_REQ"
	register "gpp_clk_config[5]" = "GPP_CLK_REQ"
	register "gpp_clk_config[6]" = "GPP_CLK_REQ"

	#TODO: USB?

	device domain 0 on
		device ref iommu on end
		device ref gpp_gfx_bridge_0 on end # DGPU
		device ref gpp_bridge_0 on end # LAN
		device ref gpp_bridge_1 on end # WLAN
		device ref gpp_bridge_2 on end # SSD2
		device ref gpp_bridge_3 on end # SSD1
		device ref gpp_bridge_a on  # Internal GPP Bridge 0 to Bus A
			device ref gfx on end # Internal GPU (GFX)
			device ref gfx_hda on end # GFX HD Audio Controller
			device ref crypto on end # Crypto Coprocessor
			device ref xhci_0 on end # USB 3.1 (USB0)
			device ref xhci_1 on end # USB 3.1 (USB1)
			device ref acp on end # Audio Processor
			device ref hda on end # HD Audio Controller
		end
		device ref gpp_bridge_b on  # Internal GPP Bridge 1 to Bus B
			device ref sata_0 on end # SATA
			device ref sata_1 on end # SATA
		end
	end

	device ref uart_0 on end # UART0

end
